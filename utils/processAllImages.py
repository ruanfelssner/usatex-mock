#!/usr/bin/env python3
"""
Script Principal para Processamento de Imagens UsaTex
Executa todo o pipeline de processamento de imagens:
1. Limpa pastas de destino
2. Padroniza nomes dos arquivos
3. Gera thumbs
4. Gera JSONs de metadata
5. Atualiza mockups se necess√°rio
"""

import os
import re
import shutil
import json
import subprocess
import sys
from PIL import Image
from pathlib import Path

class ImageProcessor:
    def __init__(self):
        self.base_folder = "./base-images"
        self.thumb_folder = "./static/assets/thumb"
        self.modelos_folder = "./static/assets/modelos"
        self.mockups_folder = "./static/assets/mockups"
        
        # Configura√ß√µes de tamanho
        self.thumb_size = (128, 128)
        self.modelos_size = (1182, 1182)
        
        # Estat√≠sticas
        self.stats = {
            'renamed': 0,
            'thumbs_created': 0,
            'modelos_created': 0,
            'errors': 0
        }

    def clean_folders(self):
        """Limpa as pastas de thumb e modelos"""
        print("üßπ Limpando pastas de destino...")
        
        folders_to_clean = [self.thumb_folder, self.modelos_folder]
        
        for folder in folders_to_clean:
            if os.path.exists(folder):
                shutil.rmtree(folder)
                print(f"  ‚úì Pasta {folder} limpa")
            os.makedirs(folder, exist_ok=True)
            print(f"  ‚úì Pasta {folder} criada")

    def standardize_filename(self, filename):
        """
        Padroniza nomes de arquivos conforme as regras:
        - UC_202520 v1.jpg -> UC_202520-v1.jpg
        - UT4606 (2).jpg -> UT4606-2.jpg
        - UT4603V2.jpg -> UT4603-V2.jpg
        - Remove espa√ßos extras e caracteres especiais
        """
        name, ext = os.path.splitext(filename)
        
        # Converter para lowercase a extens√£o
        ext = ext.lower()
        
        # Padr√£o 1: "UC_202520 v1" -> "UC_202520-v1"
        name = re.sub(r'\s+v(\d+)', r'-v\1', name, flags=re.IGNORECASE)
        
        # Padr√£o 2: "UT4606 (2)" -> "UT4606-2"
        name = re.sub(r'\s*\((\d+)\)', r'-\1', name)
        
        # Padr√£o 3: "UT4603V2" -> "UT4603-V2" (se n√£o tem h√≠fen antes do V)
        name = re.sub(r'([0-9])V([0-9])', r'\1-V\2', name)
        
        # Padr√£o 4: Remover espa√ßos extras e substituir por h√≠fen
        name = re.sub(r'\s+', '-', name.strip())
        
        # Padr√£o 5: Remover caracteres especiais exceto h√≠fen e underscore
        name = re.sub(r'[^\w\-_]', '', name)
        
        # Padr√£o 6: Remover h√≠fens m√∫ltiplos
        name = re.sub(r'-+', '-', name)
        
        # Padr√£o 7: Remover h√≠fen no final
        name = name.rstrip('-')
        
        return f"{name}{ext}"

    def rename_files(self):
        """Renomeia arquivos na pasta base-images para padronizar"""
        print("üìù Padronizando nomes dos arquivos...")
        
        if not os.path.exists(self.base_folder):
            print(f"  ‚ùå Pasta {self.base_folder} n√£o encontrada!")
            return
        
        renamed_files = []
        
        for filename in os.listdir(self.base_folder):
            if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                old_path = os.path.join(self.base_folder, filename)
                new_filename = self.standardize_filename(filename)
                new_path = os.path.join(self.base_folder, new_filename)
                
                if filename != new_filename:
                    try:
                        # Verificar se o novo nome j√° existe
                        if os.path.exists(new_path):
                            print(f"  ‚ö†Ô∏è  Arquivo {new_filename} j√° existe, pulando {filename}")
                            continue
                            
                        os.rename(old_path, new_path)
                        renamed_files.append((filename, new_filename))
                        self.stats['renamed'] += 1
                        print(f"  ‚úì {filename} ‚Üí {new_filename}")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao renomear {filename}: {e}")
                        self.stats['errors'] += 1
        
        if not renamed_files:
            print("  ‚úì Todos os arquivos j√° est√£o padronizados")
        
        return renamed_files

    def process_images(self):
        """Processa as imagens gerando thumbs e modelos redimensionados"""
        print("üñºÔ∏è  Processando imagens...")
        
        if not os.path.exists(self.base_folder):
            print(f"  ‚ùå Pasta {self.base_folder} n√£o encontrada!")
            return
        
        image_files = [f for f in os.listdir(self.base_folder) 
                      if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp'))]
        
        total_files = len(image_files)
        print(f"  üìä Encontradas {total_files} imagens para processar")
        
        for i, filename in enumerate(image_files, 1):
            try:
                file_path = os.path.join(self.base_folder, filename)
                
                # Extrair nome base (remover prefixo UC_ ou UT se presente)
                base_name = filename
                if filename.startswith(('UC_', 'UT')):
                    # Remove o prefixo e mant√©m o resto
                    base_name = filename.split('_', 1)[1] if '_' in filename else filename[2:]
                
                print(f"  [{i:3d}/{total_files}] Processando: {filename}")
                
                with Image.open(file_path) as img:
                    # Converter para RGB se necess√°rio (para JPEGs)
                    if img.mode in ('RGBA', 'LA', 'P'):
                        img = img.convert('RGB')
                    
                    # Criar thumbnail (128x128 exato)
                    thumb_image = img.copy()
                    thumb_image.thumbnail(self.thumb_size, Image.Resampling.LANCZOS)
                    
                    # Centralizar a imagem em um canvas 128x128
                    thumb_canvas = Image.new('RGB', self.thumb_size, (255, 255, 255))
                    offset = ((self.thumb_size[0] - thumb_image.width) // 2,
                             (self.thumb_size[1] - thumb_image.height) // 2)
                    thumb_canvas.paste(thumb_image, offset)
                    
                    thumb_path = os.path.join(self.thumb_folder, base_name)
                    thumb_canvas.save(thumb_path, "JPEG", quality=85, optimize=True)
                    self.stats['thumbs_created'] += 1
                    
                    # Criar modelo redimensionado (mantendo propor√ß√£o)
                    modelos_image = img.copy()
                    modelos_image.thumbnail(self.modelos_size, Image.Resampling.LANCZOS)
                    modelos_path = os.path.join(self.modelos_folder, base_name)
                    modelos_image.save(modelos_path, "JPEG", quality=90, optimize=True)
                    self.stats['modelos_created'] += 1
                    
            except Exception as e:
                print(f"    ‚ùå Erro ao processar {filename}: {e}")
                self.stats['errors'] += 1

    def generate_images_json(self):
        """Gera o JSON com a lista de imagens (equivalente ao listaImages.py)"""
        print("üìÑ Gerando listaImages.json...")
        
        try:
            image_files = []
            if os.path.exists(self.thumb_folder):
                image_files = [f for f in os.listdir(self.thumb_folder) 
                              if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp'))]
                image_files.sort()  # Ordenar alfabeticamente
            
            # Criar o JSON
            data = {'imagens': image_files}
            
            with open('./listaImages.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úì listaImages.json criado com {len(image_files)} imagens")
            
        except Exception as e:
            print(f"  ‚ùå Erro ao gerar listaImages.json: {e}")
            self.stats['errors'] += 1

    def generate_mockups_json(self):
        """Executa o script generateMockupsJson.py se houver novos mockups"""
        print("üé≠ Verificando mockups...")
        
        try:
            # Verificar se h√° arquivos de mockup
            if os.path.exists(self.mockups_folder):
                mockup_files = [f for f in os.listdir(self.mockups_folder) 
                               if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp', '.svg'))]
                
                if mockup_files:
                    # Executar o script de mockups
                    result = subprocess.run([sys.executable, 'generateMockupsJson.py'], 
                                          capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        print(f"  ‚úì {result.stdout.strip()}")
                    else:
                        print(f"  ‚ùå Erro ao gerar mockups JSON: {result.stderr}")
                        self.stats['errors'] += 1
                else:
                    print("  ‚ÑπÔ∏è  Nenhum arquivo de mockup encontrado")
            else:
                print("  ‚ÑπÔ∏è  Pasta de mockups n√£o existe")
                
        except Exception as e:
            print(f"  ‚ùå Erro ao processar mockups: {e}")
            self.stats['errors'] += 1

    def print_statistics(self):
        """Imprime estat√≠sticas do processamento"""
        print("\n" + "="*60)
        print("üìä RELAT√ìRIO DE PROCESSAMENTO")
        print("="*60)
        print(f"Arquivos renomeados:     {self.stats['renamed']}")
        print(f"Thumbnails criados:      {self.stats['thumbs_created']}")
        print(f"Modelos criados:         {self.stats['modelos_created']}")
        print(f"Erros encontrados:       {self.stats['errors']}")
        print("="*60)
        
        if self.stats['errors'] == 0:
            print("‚úÖ Processamento conclu√≠do com sucesso!")
        else:
            print(f"‚ö†Ô∏è  Processamento conclu√≠do com {self.stats['errors']} erro(s)")

    def run(self):
        """Executa todo o pipeline de processamento"""
        print("üöÄ INICIANDO PROCESSAMENTO DE IMAGENS USATEX")
        print("="*60)
        
        try:
            # 1. Limpar pastas de destino
            self.clean_folders()
            print()
            
            # 2. Padronizar nomes dos arquivos
            self.rename_files()
            print()
            
            # 3. Processar imagens (gerar thumbs e modelos)
            self.process_images()
            print()
            
            # 4. Gerar JSON das imagens
            self.generate_images_json()
            print()
            
            # 5. Gerar JSON dos mockups se necess√°rio
            self.generate_mockups_json()
            
            # 6. Mostrar estat√≠sticas
            self.print_statistics()
            
        except KeyboardInterrupt:
            print("\n\n‚õî Processamento interrompido pelo usu√°rio")
        except Exception as e:
            print(f"\n\n‚ùå Erro cr√≠tico: {e}")
            self.stats['errors'] += 1

def main():
    """Fun√ß√£o principal"""
    processor = ImageProcessor()
    processor.run()

if __name__ == "__main__":
    main()
